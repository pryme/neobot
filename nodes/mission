#! /usr/bin/env python

from __future__ import division

import rospy
from std_msgs.msg import String, Int16
from geometry_msgs.msg import PoseStamped
from nav_msgs.msg import Odometry
from neobot import mission_controller

class MissionNode:
    """Controls the overall neobot mission.
    
    """
    def __init__(self):
        num_edges = 2  # number of table edges to seek
        self.controller = mission_controller.MissionController(num_edges)
    
    def main(self):
        rospy.init_node('mission_node')
        self.nodeName = rospy.get_name()
        rospy.loginfo("{0} started".format(self.nodeName))
        
        self.goalPub = rospy.Publisher('move_base_simple/goal', 
            PoseStamped, queue_size = 1)
        rospy.Subscriber('goal_status', String, self.statusCallback)
        rospy.Subscriber('odom', Odometry, self.odomCallback)  
        rospy.Subscriber('cliff_status', Int16, self.cliffCallback) # check msg type
        # TODO add other subs for vision

        self.cur_pose = None
        self.goal_pose = self.cur_pose
        self.state = self.controller.seeker.state
        self.cliff_status = None
        
        self.rate = rospy.get_param('~rate', 1.0)
        self.timeout = float(rospy.get_param('~timeout', 3.0))  ## TODO default?

        rate = rospy.Rate(self.rate)
        while not rospy.is_shutdown():
            self.publish()
            rate.sleep()
            
    def publish(self):
        # seems very awkward
        if self.state != self.controller.seeker.state:  # if state changed, update goal            
            self.goal_pose = self.controller.get_goal(self.cur_pose, self.cliff_status)

    
    def cliffCallback(self, msg):
        self.cliff_status = msg
        
    def odomCallback(self, msg):  # 
        self.cur_pose = msg.pose.pose
        
    def statusCallback(self, msg):
        # must be a better way :(
        if msg.data == 'at_cliff':
            self.controller.seeker.at_cliff()
        elif msg.data == 'at_goal':
            self.controller.seeker.at_goal()
        elif msg.data == 'start':
            self.controller.seeker.start()
        else:
            rospy.logwarn("Unexpected msg in statusCallback")
        print('Got msg: %s; New state: %s' % (msg.data, self.controller.seeker.state))  # TODO debug
        #print('Seeker.ch.state: %s' % self.controller.seeker.ch.state)

    
if __name__ == '__main__':
    try:
        node = MissionNode()
        node.main()
    except rospy.ROSInterruptException:
        pass
        
